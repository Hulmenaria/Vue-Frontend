import { defineStore } from 'pinia'

export const markMapStore = defineStore('markMap', {
  state: () => ({
    markMap: {
      blind: {
        es: 'ciego',
        keywords: {
          en: [
            'cloud',
            'eye',
            'sight',
            'vision',
            'blind',
            'darkness',
            'sightless',
            'unseeing',
            'gouge',
            'flash',
            'whatch',
          ],
          es: [
            'cieg',
            'cegad',
            'cegue',
            'deslumbra',
            'destell',
            'impedid',
            'invidente',
            'nubla',
            'obnubila',
            'ojo',
            'oscur',
            'velad',
            'vist',
          ],
        },
      },
      bleed: {
        es: 'sangrado',
        keywords: {
          en: ['blood', 'bleed', 'cut', 'exanginate', 'gore', 'tear', 'slash', 'phleboto'],
          es: [
            'chaja',
            'cort',
            'desang',
            'desgar',
            'flebot',
            'hemorrag',
            'lacera',
            'raja',
            'sang',
            'taj',
          ],
        },
      },
      burnt: {
        es: 'quemado',
        keywords: {
          en: [
            'fire',
            'burn',
            'blaze',
            'char',
            'flame',
            'overheat',
            'overburn',
            'roast',
            'scorch',
            'sear',
            'toast',
          ],
          es: [
            'abras',
            'achichar',
            'ard',
            'calci',
            'carbon',
            'chamus',
            'fuego',
            'igni',
            'incendi',
            'inciner',
            'quema',
            'llama',
            'quema',
            'rostiz',
            'socarra',
            'tosta',
          ],
        },
      },
      dread: {
        es: 'terror',
        keywords: {
          en: [
            'aberra',
            'apprehen',
            'afflict',
            'anguish',
            'anxiety',
            'crav',
            'dread',
            'consterna',
            'horr',
            'distres',
            'grief',
            'grim',
            'damn',
            'disqui',
            'disconsola',
            'despair',
            'fright',
            'scourge',
            'phobia',
            'ignominy',
            'impreca',
            'unease',
            'infam',
            'evil',
            'fear',
            'grudge',
            'nightmare',
            'sorrow',
            'repug',
            'startle',
            'trastorno',
            'tribula',
            'distur',
            'hexe',
            'vexation',
            'vile',
          ],
          es: [
            'afli',
            'alarma',
            'alien',
            'angustia',
            'ansi',
            'abers',
            'aprens',
            'consterna',
            'corromp',
            'corrup',
            'congoj',
            'damn',
            'desaso',
            'descon',
            'desesp',
            'espant',
            'enagen',
            'flagel',
            'fobia',
            'agrav',
            'ignom',
            'imprec',
            'inquiet',
            'infam',
            'injur',
            'maldit',
            'mal',
            'mania',
            'miedo',
            'mort',
            'ojeriza',
            'panico',
            'pavor',
            'perver',
            'pesa',
            'pena',
            'penit',
            'porfia',
            'repel',
            'repu',
            'remor',
            'sacri',
            'sobresalt',
            'supli',
            'sust',
            'temor',
            'terro',
            'torment',
            'tortur',
            'tribul',
            'turba',
            'ultraj',
            'veja',
            'vil',
            'zaheri',
          ],
        },
      },
      drunk: {
        es: 'ebrio',
        keywords: {
          en: [
            'alcohol',
            'booze',
            'drunk',
            'crack',
            'inebriate',
            'high',
            'tipsy',
            'hangover',
            'stoned',
            'wasted',
          ],
          es: [
            'achispad',
            'alcohol',
            'alegre',
            'bebid',
            'beod',
            'borrach',
            'chispa',
            'cogor',
            'colocad',
            'contentill',
            'cuba',
            'curd',
            'desfas',
            'dipsom',
            'ebri',
            'embriag',
            'mamad',
            'melop',
            'mon',
            'morad',
            'pedo',
            'piripi',
            'resaca',
            'toma',
            'tinkiwinki',
          ],
        },
      },
      intoxicated: {
        es: 'intoxicado',
        keywords: {
          en: ['acrid', 'bitter', 'caustic', 'moldy', 'noxious', 'taint', 'smear', 'stained'],
          es: [
            'acid',
            'acerb',
            'acre',
            'azote',
            'causti',
            'contamin',
            'corroi',
            'infest',
            'intoxi',
            'macula',
            'mancha',
            'moh',
            'nocivo',
            'pringu',
            'tosigo',
            'toxi',
          ],
        },
      },
      petrify: {
        es: 'petrificado',
        keywords: {
          en: [
            'hard',
            'icy',
            'ice',
            'immobil',
            'inanimat',
            'inert',
            'freez',
            'frig',
            'froz',
            'knock',
            'passi',
            'peace',
            'petrif',
            'rig',
            'rock',
            'statue',
            'stone',
            'unmov',
          ],
          es: [
            'aterid',
            'aturd',
            'congela',
            'endureci',
            'helad',
            'frig',
            'geli',
            'inerte',
            'inanim',
            'inmovil',
            'paral',
            'pasiv',
            'pazif',
            'petrif',
            'rigid',
            'solidif',
            'tieso',
            'yerto',
          ],
        },
      },
      poison: {
        es: 'veneno',
        keywords: {
          en: [
            'poison',
            'venom',
            'poisonous',
            'vomit',
            'disease',
            'ill',
            'odor',
            'sick',
            'smell',
            'stink',
            'stunk',
            'stench',
          ],
          es: [
            'afec',
            'dolenc',
            'enferm',
            'fetid',
            'hedion',
            'hedo',
            'infec',
            'malest',
            'maloliente',
            'naus',
            'olor',
            'pest',
            'plag',
            'ponzoÃ±',
            'venen',
          ],
        },
      },
      stun: {
        es: 'aturdido',
        keywords: {
          en: [
            'amaz',
            'astonish',
            'bewildered',
            'caught',
            'confuse',
            'daze',
            'disorien',
            'disturb',
            'dazz',
            'dizz',
            'dumb',
            'hesita',
            'numb',
            'overwhel',
            'shocked',
            'stun',
            'surpris',
            'trapped',
            'unbalanced',
            'unmasked',
            'wondered',
          ],
          es: [
            'alelad',
            'asombra',
            'atonit',
            'atonta',
            'atolondra',
            'atrapad',
            'aturd',
            'azorad',
            'confu',
            'conmocio',
            'conmovid',
            'contusi',
            'desconcerta',
            'desequilibra',
            'desenmascar',
            'desorienta',
            'emboba',
            'entumeci',
            'estupefact',
            'impavid',
            'maravilla',
            'maread',
            'nausea',
            'ofusca',
            'pasmad',
            'pillad',
            'sorprend',
            'sobrecogi',
            'turba',
            'turula',
            'vacila',
          ],
        },
      },
      unknown: {
        es: 'desconocido',
        keywords: {
          en: ['unknown'],
          es: ['desconocido'],
        },
      },
      wound: {
        es: 'herida',
        keywords: {
          en: [
            'dislocated',
            'bone',
            'bony',
            'break',
            'brok',
            'bruise',
            'cut',
            'cripple',
            'dislocat',
            'hit',
            'hurt',
            'fractur',
            'gash',
            'injur',
            'ruptu',
            'splint',
            'sprain',
            'strain',
            'tors',
            'wound',
          ],
          es: [
            'disloc',
            'distens',
            'esguince',
            'fractura',
            'golpe',
            'herid',
            'hueso',
            'lesion',
            'lisia',
            'luxa',
            'magulladura',
            'osa',
            'ose',
            'quebra',
            'quiebr',
            'roto',
            'rotura',
            'tors',
            'torc',
            'traumati',
            'troncha',
          ],
        },
      },
    },
    marks: [],
  }),
  getters: {
    getKeywordId:
      (state) =>
      (input, lang = 'en') => {
        const normalizedInput = input?.trim().toLowerCase()
        if (!normalizedInput) return 'unknown'

        for (const [id, entry] of Object.entries(state.markMap)) {
          const allKeywords = [...entry.keywords.en, ...entry.keywords.es]
          if (allKeywords.some((keyword) => normalizedInput.includes(keyword))) {
            return id
          }
        }
        return 'unknown'
      },
  },
  actions: {
    async fetchImages() {
      try {
        const response = await fetch('/collections/mark.json')
        if (!response.ok) {
          throw new Error('JSON not found')
        }
        const data = await response.json()
        this.marks = data.marks
      } catch (err) {
        console.error('Error al cargar imÃ¡genes:', err)
        this.marks = []
      }
    },

    getMarkImage(type) {
      const normalized = type.toString().trim().toLowerCase()

      const match = Object.entries(this.markMap).find(([_, markData]) => {
        const allKeywords = [...markData.keywords.en, ...markData.keywords.es]
        return allKeywords.some((keyword) => normalized.includes(keyword))
      })

      if (match) {
        const [markId] = match
        const markImage = this.marks.find((mark) => mark.id === markId)
        return markImage?.image
      }
      return normalized ? '/icon/mark/mark-exclam.png' : ''
    },
  },
})
